//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mdw.LudoGamePlayServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ludoService", ConfigurationName="LudoGamePlayServiceReference.ILudo", CallbackContract=typeof(Mdw.LudoGamePlayServiceReference.ILudoCallback))]
    public interface ILudo {
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/RollToClient", ReplyAction="ludoService/ILudo/RollToClientResponse")]
        string RollToClient(string playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/RollToClient", ReplyAction="ludoService/ILudo/RollToClientResponse")]
        System.Threading.Tasks.Task<string> RollToClientAsync(string playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Roll", ReplyAction="ludoService/ILudo/RollResponse")]
        void Roll(string playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Roll", ReplyAction="ludoService/ILudo/RollResponse")]
        System.Threading.Tasks.Task RollAsync(string playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/NumberToClient", ReplyAction="ludoService/ILudo/NumberToClientResponse")]
        int NumberToClient();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/NumberToClient", ReplyAction="ludoService/ILudo/NumberToClientResponse")]
        System.Threading.Tasks.Task<int> NumberToClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Subscribe", ReplyAction="ludoService/ILudo/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Subscribe", ReplyAction="ludoService/ILudo/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/CreatePlayers", ReplyAction="ludoService/ILudo/CreatePlayersResponse")]
        void CreatePlayers(string userName, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/CreatePlayers", ReplyAction="ludoService/ILudo/CreatePlayersResponse")]
        System.Threading.Tasks.Task CreatePlayersAsync(string userName, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/ChatToClient", ReplyAction="ludoService/ILudo/ChatToClientResponse")]
        string ChatToClient(string playername, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/ChatToClient", ReplyAction="ludoService/ILudo/ChatToClientResponse")]
        System.Threading.Tasks.Task<string> ChatToClientAsync(string playername, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetPlayerColor", ReplyAction="ludoService/ILudo/GetPlayerColorResponse")]
        void GetPlayerColor(string playername, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetPlayerColor", ReplyAction="ludoService/ILudo/GetPlayerColorResponse")]
        System.Threading.Tasks.Task GetPlayerColorAsync(string playername, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/StartGame", ReplyAction="ludoService/ILudo/StartGameResponse")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/StartGame", ReplyAction="ludoService/ILudo/StartGameResponse")]
        System.Threading.Tasks.Task StartGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/NextTurn", ReplyAction="ludoService/ILudo/NextTurnResponse")]
        void NextTurn();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/NextTurn", ReplyAction="ludoService/ILudo/NextTurnResponse")]
        System.Threading.Tasks.Task NextTurnAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/PutTokenInPlay", ReplyAction="ludoService/ILudo/PutTokenInPlayResponse")]
        string PutTokenInPlay(System.Drawing.Color color, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/PutTokenInPlay", ReplyAction="ludoService/ILudo/PutTokenInPlayResponse")]
        System.Threading.Tasks.Task<string> PutTokenInPlayAsync(System.Drawing.Color color, bool remove);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/PlaceToken", ReplyAction="ludoService/ILudo/PlaceTokenResponse")]
        void PlaceToken(string playername, string tokenname, System.Drawing.Color color, string destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/PlaceToken", ReplyAction="ludoService/ILudo/PlaceTokenResponse")]
        System.Threading.Tasks.Task PlaceTokenAsync(string playername, string tokenname, System.Drawing.Color color, string destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetPlayer", ReplyAction="ludoService/ILudo/GetPlayerResponse")]
        string GetPlayer(System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetPlayer", ReplyAction="ludoService/ILudo/GetPlayerResponse")]
        System.Threading.Tasks.Task<string> GetPlayerAsync(System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Chat", ReplyAction="ludoService/ILudo/ChatResponse")]
        void Chat(string playername, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Chat", ReplyAction="ludoService/ILudo/ChatResponse")]
        System.Threading.Tasks.Task ChatAsync(string playername, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Check", ReplyAction="ludoService/ILudo/CheckResponse")]
        bool Check(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Check", ReplyAction="ludoService/ILudo/CheckResponse")]
        System.Threading.Tasks.Task<bool> CheckAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/MoveToken", ReplyAction="ludoService/ILudo/MoveTokenResponse")]
        string MoveToken(string field, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/MoveToken", ReplyAction="ludoService/ILudo/MoveTokenResponse")]
        System.Threading.Tasks.Task<string> MoveTokenAsync(string field, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/MoveToClient", ReplyAction="ludoService/ILudo/MoveToClientResponse")]
        void MoveToClient(string playername, string tokenname, System.Drawing.Color color, string destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/MoveToClient", ReplyAction="ludoService/ILudo/MoveToClientResponse")]
        System.Threading.Tasks.Task MoveToClientAsync(string playername, string tokenname, System.Drawing.Color color, string destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetReadyToEat", ReplyAction="ludoService/ILudo/GetReadyToEatResponse")]
        System.Drawing.Color GetReadyToEat();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetReadyToEat", ReplyAction="ludoService/ILudo/GetReadyToEatResponse")]
        System.Threading.Tasks.Task<System.Drawing.Color> GetReadyToEatAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/EatToClient", ReplyAction="ludoService/ILudo/EatToClientResponse")]
        void EatToClient(string playername, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/EatToClient", ReplyAction="ludoService/ILudo/EatToClientResponse")]
        System.Threading.Tasks.Task EatToClientAsync(string playername, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/HasWon", ReplyAction="ludoService/ILudo/HasWonResponse")]
        bool HasWon(string playername);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/HasWon", ReplyAction="ludoService/ILudo/HasWonResponse")]
        System.Threading.Tasks.Task<bool> HasWonAsync(string playername);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILudoCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/OnChatCallback")]
        void OnChatCallback(string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/OnRollCallback")]
        void OnRollCallback(string playername, int diceroll);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/OnPlayerLogin")]
        void OnPlayerLogin(string playername, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/OnPlayerTurn")]
        void OnPlayerTurn();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/OnPlaceToken")]
        void OnPlaceToken(string TokenName, System.Drawing.Color color, string destination);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/OnMoveToken")]
        void OnMoveToken(string TokenName, System.Drawing.Color color, string destination);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/OnTokenEat")]
        void OnTokenEat(string playername, System.Drawing.Color color);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILudoChannel : Mdw.LudoGamePlayServiceReference.ILudo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LudoClient : System.ServiceModel.DuplexClientBase<Mdw.LudoGamePlayServiceReference.ILudo>, Mdw.LudoGamePlayServiceReference.ILudo {
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string RollToClient(string playername) {
            return base.Channel.RollToClient(playername);
        }
        
        public System.Threading.Tasks.Task<string> RollToClientAsync(string playername) {
            return base.Channel.RollToClientAsync(playername);
        }
        
        public void Roll(string playername) {
            base.Channel.Roll(playername);
        }
        
        public System.Threading.Tasks.Task RollAsync(string playername) {
            return base.Channel.RollAsync(playername);
        }
        
        public int NumberToClient() {
            return base.Channel.NumberToClient();
        }
        
        public System.Threading.Tasks.Task<int> NumberToClientAsync() {
            return base.Channel.NumberToClientAsync();
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void CreatePlayers(string userName, System.Drawing.Color color) {
            base.Channel.CreatePlayers(userName, color);
        }
        
        public System.Threading.Tasks.Task CreatePlayersAsync(string userName, System.Drawing.Color color) {
            return base.Channel.CreatePlayersAsync(userName, color);
        }
        
        public string ChatToClient(string playername, string message) {
            return base.Channel.ChatToClient(playername, message);
        }
        
        public System.Threading.Tasks.Task<string> ChatToClientAsync(string playername, string message) {
            return base.Channel.ChatToClientAsync(playername, message);
        }
        
        public void GetPlayerColor(string playername, System.Drawing.Color color) {
            base.Channel.GetPlayerColor(playername, color);
        }
        
        public System.Threading.Tasks.Task GetPlayerColorAsync(string playername, System.Drawing.Color color) {
            return base.Channel.GetPlayerColorAsync(playername, color);
        }
        
        public void StartGame() {
            base.Channel.StartGame();
        }
        
        public System.Threading.Tasks.Task StartGameAsync() {
            return base.Channel.StartGameAsync();
        }
        
        public void NextTurn() {
            base.Channel.NextTurn();
        }
        
        public System.Threading.Tasks.Task NextTurnAsync() {
            return base.Channel.NextTurnAsync();
        }
        
        public string PutTokenInPlay(System.Drawing.Color color, bool remove) {
            return base.Channel.PutTokenInPlay(color, remove);
        }
        
        public System.Threading.Tasks.Task<string> PutTokenInPlayAsync(System.Drawing.Color color, bool remove) {
            return base.Channel.PutTokenInPlayAsync(color, remove);
        }
        
        public void PlaceToken(string playername, string tokenname, System.Drawing.Color color, string destination) {
            base.Channel.PlaceToken(playername, tokenname, color, destination);
        }
        
        public System.Threading.Tasks.Task PlaceTokenAsync(string playername, string tokenname, System.Drawing.Color color, string destination) {
            return base.Channel.PlaceTokenAsync(playername, tokenname, color, destination);
        }
        
        public string GetPlayer(System.Drawing.Color color) {
            return base.Channel.GetPlayer(color);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerAsync(System.Drawing.Color color) {
            return base.Channel.GetPlayerAsync(color);
        }
        
        public void Chat(string playername, string message) {
            base.Channel.Chat(playername, message);
        }
        
        public System.Threading.Tasks.Task ChatAsync(string playername, string message) {
            return base.Channel.ChatAsync(playername, message);
        }
        
        public bool Check(string playerName) {
            return base.Channel.Check(playerName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAsync(string playerName) {
            return base.Channel.CheckAsync(playerName);
        }
        
        public string MoveToken(string field, System.Drawing.Color color) {
            return base.Channel.MoveToken(field, color);
        }
        
        public System.Threading.Tasks.Task<string> MoveTokenAsync(string field, System.Drawing.Color color) {
            return base.Channel.MoveTokenAsync(field, color);
        }
        
        public void MoveToClient(string playername, string tokenname, System.Drawing.Color color, string destination) {
            base.Channel.MoveToClient(playername, tokenname, color, destination);
        }
        
        public System.Threading.Tasks.Task MoveToClientAsync(string playername, string tokenname, System.Drawing.Color color, string destination) {
            return base.Channel.MoveToClientAsync(playername, tokenname, color, destination);
        }
        
        public System.Drawing.Color GetReadyToEat() {
            return base.Channel.GetReadyToEat();
        }
        
        public System.Threading.Tasks.Task<System.Drawing.Color> GetReadyToEatAsync() {
            return base.Channel.GetReadyToEatAsync();
        }
        
        public void EatToClient(string playername, System.Drawing.Color color) {
            base.Channel.EatToClient(playername, color);
        }
        
        public System.Threading.Tasks.Task EatToClientAsync(string playername, System.Drawing.Color color) {
            return base.Channel.EatToClientAsync(playername, color);
        }
        
        public bool HasWon(string playername) {
            return base.Channel.HasWon(playername);
        }
        
        public System.Threading.Tasks.Task<bool> HasWonAsync(string playername) {
            return base.Channel.HasWonAsync(playername);
        }
    }
}
