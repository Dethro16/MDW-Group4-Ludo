//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mdw.LudoGamePlayServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ludoService", ConfigurationName="LudoGamePlayServiceReference.ILudo", CallbackContract=typeof(Mdw.LudoGamePlayServiceReference.ILudoCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILudo {
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetDiceRoll", ReplyAction="ludoService/ILudo/GetDiceRollResponse")]
        int GetDiceRoll();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetDiceRoll", ReplyAction="ludoService/ILudo/GetDiceRollResponse")]
        System.Threading.Tasks.Task<int> GetDiceRollAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/Roll")]
        void Roll(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/Roll")]
        System.Threading.Tasks.Task RollAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/StartGame")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/StartGame")]
        System.Threading.Tasks.Task StartGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/CreatePlayer")]
        void CreatePlayer(string playerName, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/CreatePlayer")]
        System.Threading.Tasks.Task CreatePlayerAsync(string playerName, System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetPlayer", ReplyAction="ludoService/ILudo/GetPlayerResponse")]
        string GetPlayer(System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/GetPlayer", ReplyAction="ludoService/ILudo/GetPlayerResponse")]
        System.Threading.Tasks.Task<string> GetPlayerAsync(System.Drawing.Color color);
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Subscribe", ReplyAction="ludoService/ILudo/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="ludoService/ILudo/Subscribe", ReplyAction="ludoService/ILudo/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="ludoService/ILudo/Unsubscribe")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="ludoService/ILudo/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILudoCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ILudo/showDiceRoll")]
        void showDiceRoll(string userName, int diceNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILudoChannel : Mdw.LudoGamePlayServiceReference.ILudo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LudoClient : System.ServiceModel.DuplexClientBase<Mdw.LudoGamePlayServiceReference.ILudo>, Mdw.LudoGamePlayServiceReference.ILudo {
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LudoClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int GetDiceRoll() {
            return base.Channel.GetDiceRoll();
        }
        
        public System.Threading.Tasks.Task<int> GetDiceRollAsync() {
            return base.Channel.GetDiceRollAsync();
        }
        
        public void Roll(string userName) {
            base.Channel.Roll(userName);
        }
        
        public System.Threading.Tasks.Task RollAsync(string userName) {
            return base.Channel.RollAsync(userName);
        }
        
        public void StartGame() {
            base.Channel.StartGame();
        }
        
        public System.Threading.Tasks.Task StartGameAsync() {
            return base.Channel.StartGameAsync();
        }
        
        public void CreatePlayer(string playerName, System.Drawing.Color color) {
            base.Channel.CreatePlayer(playerName, color);
        }
        
        public System.Threading.Tasks.Task CreatePlayerAsync(string playerName, System.Drawing.Color color) {
            return base.Channel.CreatePlayerAsync(playerName, color);
        }
        
        public string GetPlayer(System.Drawing.Color color) {
            return base.Channel.GetPlayer(color);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerAsync(System.Drawing.Color color) {
            return base.Channel.GetPlayerAsync(color);
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
