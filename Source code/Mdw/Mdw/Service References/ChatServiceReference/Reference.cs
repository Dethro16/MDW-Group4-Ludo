//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mdw.ChatServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ludoService", ConfigurationName="ChatServiceReference.ISendChatService", CallbackContract=typeof(Mdw.ChatServiceReference.ISendChatServiceCallback))]
    public interface ISendChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/SendMessage")]
        void SendMessage(string msg, string sender, string receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string msg, string sender, string receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/Start")]
        void Start(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/Start")]
        System.Threading.Tasks.Task StartAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/Stop")]
        void Stop(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/Stop")]
        System.Threading.Tasks.Task StopAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISendChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/ReceiveMessage")]
        void ReceiveMessage(string msg, string receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ludoService/ISendChatService/SendNames")]
        void SendNames(string[] names);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISendChatServiceChannel : Mdw.ChatServiceReference.ISendChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendChatServiceClient : System.ServiceModel.DuplexClientBase<Mdw.ChatServiceReference.ISendChatService>, Mdw.ChatServiceReference.ISendChatService {
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SendChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string msg, string sender, string receiver) {
            base.Channel.SendMessage(msg, sender, receiver);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string msg, string sender, string receiver) {
            return base.Channel.SendMessageAsync(msg, sender, receiver);
        }
        
        public void Start(string name) {
            base.Channel.Start(name);
        }
        
        public System.Threading.Tasks.Task StartAsync(string name) {
            return base.Channel.StartAsync(name);
        }
        
        public void Stop(string name) {
            base.Channel.Stop(name);
        }
        
        public System.Threading.Tasks.Task StopAsync(string name) {
            return base.Channel.StopAsync(name);
        }
    }
}
